// binary lifting and LCA (binary lifting is the algo to find kth ancestor)

// Errichto videos (channel Errichto Algorithms)
// binary folding - https://www.youtube.com/watch?v=oib-XsjFa-M
// LCA - https://www.youtube.com/watch?v=dOAxrhAUIhA

// check this question for more details on how and why `up` is being calculated
// https://leetcode.com/problems/kth-ancestor-of-a-tree-node/

const int nax = 1e5 + 5;
const int lnax = 25;

int up[nax][lnax];
int parent[nax];
int dep[nax];

void dfs(vector<vector<int>> &adj, int i, vector<int> &vis) {
    if(vis[i])
        return;

    vis[i] = 1;
    
    for(auto x: adj[i]) {
        if(!vis[x]) {
            dep[x] = dep[i] + 1;
            parent[x] = i;
            dfs(adj, x, vis);
        }
    }
    return;
}

int findLca(int a, int b) {
    if(dep[a] < dep[b]) 
            swap(a, b);
    
    // bring a to the depth of b (get the parent of a which is at same height as b)
    int k = dep[a] - dep[b];
    for(int j = lnax; j >= 0; j--) {
        if(k & (1 << j)) {
            a = up[a][j];
        }
    }
    
    if(a == b)
        return a;

    // bringing both up logarithmically
    for(int j = lnax - 1; j >= 0; j--) {
        if(up[a][j] != up[b][j]) {
            a = up[a][j];
            b = up[b][j];
        }
    }
    // with above loop we should get to the highest point in graph which is not common
    // so one more point up we shoud have the lca
    return parent[a];
}

vector<int> lcaQueries(int n, vector<vector<int>>& edges, vector<vector<int>>& q) {
    
    // setting everything
    for(int i = 0; i <= n; i++) {
        for(int j = 0; j < 25; j++) {
            up[i][j] = 0;
        }
        parent[i] = -1;
        dep[i] = -1;
    }
    
    // prepare adjcency list
    vector<vector<int>> adj(n + 1);
    for(auto x: edges) {
        adj[x[0]].push_back({x[1]});
        adj[x[1]].push_back({x[0]});
    }
    
    vector<int> vis(n + 1, 0);
    // trees are always connected
    // root at 0
    
    // calculating depths, setting parent
    parent[0] = 0;
    dep[0] = 0;
    dfs(adj, 0, vis);
    

    // lca precompute
    for(int i = 0; i < n; i++) {
        up[i][0] = parent[i];
    }
    // calculating up (preCalc type) for the 25 powers of i
    for(int j = 1; j < 25; j++) {
        for(int i = 0; i < n; i++) {
            up[i][j] = up[ up[i][j - 1] ][j - 1];
        }
    }

    // getting lca for q queries, can use this for whatever we want
    for(auto x: q) {
        int lca = findLca(x[0], x[1]);
    }
}
